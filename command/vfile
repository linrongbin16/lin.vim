#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
import time

sys.path.append(".")
import util


def _help():
    msg = """usage: vfile [option] filetype

  File operations recursively in current directory.

option:
  -d/--delete                           delete files with filetype
  -r/--replace [old] [new]              replace old text with new text in files with
                                        filetype
  -l/--list                             list files with filetype
  -c/--convert-encoding [encoding]      convert file encoding from old encoding to new
                                        with files with filetype
  -s/--show-encoding                    show file encoding with files in filetype
  --hidden                              include hidden directories/files (.svn .git etc)
                                        for operations above, by default exclude hidden
                                        directories/files.

  -h/--help                             show help message

encoding:
  GB18030/GB2312/GBK                    Windows chinese encoding
  UTF-8                                 Unicode UTF-8
  ASCII                                 ASCII


example:
  $ vfile -d log
  remove => 2020-11-12-23_03_16.log
  remove => 2020-11-12-23_07_30.log
  remove => ./testcases/2020-11-12-23_12_51.log
  remove => ./testcases/2020-11-12-23_30_07.log

  $ vfile -s test.log
  test.log: ascii
"""
    print(msg)
    exit(0)


def _replace(old, new, filetype, include_hidden):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in util.list_files(".", include_hidden)]
    filetype = ".%s" % (filetype)
    for f in files:
        if not f.endswith(filetype):
            continue
        try:
            with open(f, "r") as fp:
                content = fp.read()
                fp.close()
            with open(f, "w") as fp:
                new_content = content.replace(old, new)
                fp.write(new_content)
            print("%s: %s => %s" % (f, old, new))
        except Exception as e:
            print("error: %s: %s => %s failed:%s" % (f, old, new, str(e)))
    exit(0)


def _delete(filetype, include_hidden):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in util.list_files(".", include_hidden)]
    filetype = ".%s" % filetype
    for f in files:
        relname = os.path.relpath(f)
        if relname.endswith(filetype):
            print("remove => %s" % f)
            os.remove(f)
    exit(0)


def _list(filetype, include_hidden):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in util.list_files(".", include_hidden)]
    filetype = ".%s" % filetype
    for f in files:
        if f.endswith(filetype):
            print("%s" % (os.path.relpath(f, root)))
    exit(0)


def _get_encoding(outs):
    detect_encoding = "".join(outs).strip().split(":")[1]
    if detect_encoding.find("no result") >= 0:
        return None
    detect_encoding = detect_encoding.strip().split(" ")[0]
    return detect_encoding


def _convert_encoding(encoding, filetype, include_hidden):
    encoding = encoding.upper()
    encoding_name_map = {"UTF-8-SIG": "UTF-8"}
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in util.list_files(".", include_hidden)]
    filetype = ".%s" % filetype
    for f in files:
        if not f.endswith(filetype):
            continue
        detect_outs, detect_errs = util.run("chardetect", f)
        detect_encoding = _get_encoding(detect_outs)
        if detect_encoding is None:
            print("%s: no encoding" % (f))
            continue
        detect_encoding = detect_encoding.upper()
        detect_encoding = (encoding_name_map[detect_encoding]
                           if detect_encoding in encoding_name_map else detect_encoding)
        try:
            convert_outs, convert_errs = util.run(
                "iconv",
                "-f",
                detect_encoding,
                "-t",
                encoding,
                f,
            )
            new_filename = "%s.new.%s" % (f, time.time())
            new_fp = open(new_filename, "w")
            new_fp.writelines(convert_outs)
            new_fp.close()
            os.rename(f, new_filename)
            print("%s: %s => %s" % (f, detect_encoding, encoding))
        except Exception as e:
            print("error: %s: %s => %s failed:%s" % (f, detect_encoding, encoding, str(e)))
    exit(0)


def _show_encoding(filetype, include_hidden):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in util.list_files(".", include_hidden)]
    filetype = ".%s" % filetype
    for f in files:
        if not f.endswith(filetype):
            continue
        detect_outs, detect_errs = util.run("chardetect", f)
        detect_encoding = _get_encoding(detect_outs)
        print("%s: %s" % (f, detect_encoding))
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "drlc:sih",
            [
                "delete",
                "replace",
                "list",
                "convert-encoding=",
                "show-encoding",
                "hidden",
                "help",
            ],
        )
        include_hidden = False
        for opt in opts:
            if opt[0] == "--hidden":
                include_hidden = True
            elif opt[0] in ("-h", "--help"):
                _help()
        for opt in opts:
            if opt[0] in ("-d", "--delete"):
                _delete(args[0], include_hidden)
            elif opt[0] in ("-r", "--replace"):
                _replace(args[0], args[1], args[2], include_hidden)
            elif opt[0] in ("-l", "--list"):
                _list(args[0], include_hidden)
            elif opt[0] in ("-c", "--convert-encoding"):
                _convert_encoding(opt[1], args[0], include_hidden)
            elif opt[0] in ("-s", "--show"):
                _show_encoding(args[0], include_hidden)
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
