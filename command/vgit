#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
import datetime
import click

sys.path.append(".")
import util

SLASH = "\\" if util.is_windows() else "/"
GIT_PROXY_DB = util.get_command_home() + SLASH + "git_proxy.db"
GIT_CONFIG = os.path.expanduser("~") + SLASH + ".gitconfig"


def branch_show(opt):
    util.check_git_repository()
    outs = []
    if opt.startswith("a"):
        outs, _ = util.run("git", "branch", "-a")
    elif opt.startswith("l"):
        outs, _ = util.run("git", "branch")
    elif opt.startswith("r"):
        outs, _ = util.run("git", "branch", "-r")
    elif opt.startswith("t"):
        outs, _ = util.run("git", "rev-parse", "--abbrev-ref", "HEAD")
    for o in outs:
        print(o.strip())
    exit(0)


def branch_create(name):
    util.check_git_repository()
    os.system("git checkout -b %s" % (name))
    exit(0)


def branch_switch(name):
    util.check_git_repository()
    os.system("git checkout %s" % (name))
    exit(0)


def branch_delete(name):
    util.check_git_repository()
    os.system("git branch -d %s" % (name))
    exit(0)


def vgit_pull(force, debug):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist")
        return
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    print(f"[vcmd] git pull from {repo}/{branch}")
    os.system("git fetch")
    os.system(f"git pull {'--force' if force else ''} {repo} {branch}")


def vgit_push(force, debug):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist")
        exit(3)
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    comment = input("[vcmd] enter comment: ")
    comment = f"[vcmd] git push at {(datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')) if util.str_empty(comment) else comment}"
    util.check_user_confirm(f"[vcmd] git push to {repo}/{branch} with '{comment}', yes? ")
    os.chdir(util.get_git_root())
    os.system("git add -A .")
    os.system(f'git commit -m "{comment}"')
    os.system(f"git push {'--force' if force else ''} {repo} {branch}")
    exit(0)


def vgit_discard(debug):
    util.check_git_repository()
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    modifies = util.get_git_modified_files()
    untracts = util.get_git_untract_files()
    file_list = modifies + untracts
    for i in file_list:
        if i in modifies:
            print("[vcmd] discard: %s" % (i + " "))
            os.system("git checkout %s" % (i + " "))
        elif i in untracts:
            print("[vcmd] remove: %s" % (i + " "))
            os.system("rm %s" % (i + " "))
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def vgit_revert(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm("[vcmd] git revert to last '%d' commits '%s' on '%s', yes? " % (n, commit, branch))
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git revert %s" % commit)
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def vgit_reset(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm("[vcmd] git revert to last '%d' commits '%s' on '%s', yes? " % (n, commit, branch))
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git reset HEAD~%d" % n)
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def add_proxy(value, debug):
    if debug:
        print(f"[vcmd] add git proxy:{value}")
    util.append_file(GIT_PROXY_DB, f"{value}\n")


def current_using_proxy(debug):
    configs = util.read_file_by_lines(GIT_CONFIG)
    if debug:
        print(f"{GIT_CONFIG}:{configs}")
    last_setting = None
    current_proxies = []
    if configs:
        for i, line in enumerate(configs):
            trim_line = line.strip()
            if debug:
                print(f"the {i}-th line:{trim_line}, last_setting:{last_setting}, startswith proxy:{trim_line.startswith('proxy')}")
            if trim_line == 0:
                continue
            if trim_line.startswith("[") and trim_line.endswith("]"):
                last_setting = trim_line
            elif trim_line.startswith("proxy") and last_setting.lower().startswith("[http"):
                current_proxies.append(f"{last_setting}:{trim_line}")
    if current_proxies:
        for p in current_proxies:
            print(f"[vcmd] current using git proxy - {p}")
    else:
        print(f"[vcmd] no current using git proxy")


def display_proxy(debug):
    proxies = util.read_file_by_lines(GIT_PROXY_DB)
    if debug:
        print(f"{GIT_CONFIG}:{proxies}")
    trigger = False
    saver = None
    print(f"[vcmd] stored git proxy:")
    n = 0
    if proxies:
        for i, p in enumerate(proxies):
            if p.strip() == 0:
                continue
            print(f"[vcmd] stored git proxy - {p.strip()}")
            n += 1
    if n == 0:
        print(f"[vcmd] no stored git proxies")
    current_using_proxy(debug)


def disable_proxy():
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")


def switch_proxy(name, debug):
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    proxies = util.read_file_by_lines(GIT_PROXY_DB)
    if debug:
        print(f"[vcmd] {GIT_PROXY_DB}:{proxies}")
    if proxies is None:
        print("[vcmd] git proxy not configured yet, please try 'vgit -p add <name> <proxy>' first")
        return
    for p in proxies:
        ps = [x.strip() for x in p.split(":")]
        if ps[0] == name.strip():
            if debug:
                print(f"[vcmd] switch to proxy:{ps}")
            httpcmd = f"git config --global http.proxy {ps[1]}"
            httpscmd = f"git config --global https.proxy {ps[1]}"
            os.system(httpcmd)
            os.system(httpscmd)
            return
    print(f"[vcmd] git proxy:{name} not found")


def purge_proxy():
    util.purge_file(GIT_PROXY_DB)


def vgit_branch_sub_cli(branch, args, debug):
    if branch in ("local", "remote", "all", "this"):
        branch_show(branch)
    elif branch == "create":
        if len(args) != 1:
            print(f"[vcmd] please provide branch name")
            return
        branch_create(args[0])
    elif branch == "switch":
        if len(args) != 1:
            print(f"[vcmd] please provide branch name")
            return
        branch_switch(args[0])
    elif branch == "delete":
        if len(args) != 1:
            print(f"[vcmd] please provide branch name")
            return
        branch_delete(args[0])


def vgit_proxy_sub_cli(proxy, args, debug):
    if proxy == "add":
        if len(args) != 1:
            print(f"[vcmd] please provide ip proxy in format name=value")
            return
        add_proxy(args[0], debug)
    elif proxy == "switch":
        if len(args) != 1:
            print(f"[vcmd] please provide ip proxy name")
            return
        switch_proxy(args[0], debug)
    elif proxy == "none":
        disable_proxy()
    elif proxy == "purge":
        purge_proxy()
    elif proxy == "show":
        display_proxy(debug)


@click.command()
@click.option(
    "-b",
    "--branch",
    type=click.Choice(["local", "remote", "all", "this", "create", "switch", "delete"]),
    help="branch operations, use `local/remote/all/this` to display local/remote/all branches, use `create/move/delete` to create/switch/delete with branches",
)
@click.option("-pl", "--pull", is_flag=True, help="pull, use --force to pull force")
@click.option("-ps", "--push", is_flag=True, help="push, use --force to push force")
@click.option("-f", "--force", is_flag=True, help="pull/push force")
@click.option("-d", "--discard", is_flag=True, help="discard local changes")
@click.option(
    "--reset",
    type=str,
    required=False,
    help="reset N previous commits(you need to push force to override remote repository)",
)
@click.option(
    "--revert", type=str, required=False, help="revert N previous commits(use new commit instead of push force)"
)
@click.option(
    "-p",
    "--proxy",
    type=click.Choice(["add", "switch", "none", "purge", "show"]),
    help="proxy configuration, use `add` to add new ip proxy, use `switch` to switch between different ip proxies, use `none` to disable ip proxy, use `purge` to remove all configured ip proxies(and disable currently using ip proxy if exist), use `show` to display configured ip proxies and currently using ip proxy if exist",
)
@click.option("--debug", is_flag=True, help="debug mode")
@click.argument("args", nargs=-1)
def vgit_cli(branch, pull, push, force, discard, reset, revert, proxy, debug, args):
    """Dummy user interface for git"""
    if debug:
        print(f"args:{args}, type:{type(args)}")
    if branch:
        vgit_branch_sub_cli(branch, args, debug)
    elif proxy:
        vgit_proxy_sub_cli(proxy, args, debug)
    else:
        if pull:
            vgit_pull(force, debug)
        elif push:
            vgit_push(force, debug)
        elif discard:
            vgit_discard(debug)
        elif reset:
            if len(args) != 1:
                print(f"[vcmd] please provide N")
                return
            vgit_reset(int(args[0]))
        elif revert:
            if len(args) != 1:
                print(f"[vcmd] N please provide N")
                return
            vgit_revert(int(args[0]))
        else:
            print(f"[vcmd] unknown option, please try `vgit --help` for more information")


if __name__ == "__main__":
    vgit_cli()
