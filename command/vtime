#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import time
import datetime
import getopt


def _help():
    msg = """usage: vtime [option] datetime

  Datetime and timestamp conversion.

option:
  -d/--datetime [timestamp]     convert timestamp to datetime string, by default
                                timestamp is local system timestamp
  -t/--timestamp [datetime]     convert datetime string to timestamp, by default
                                datetime is local system datetime
  -u/--utc                      UTC zone, use with above options, by default false

  -h/--help                     show help message

example:
  $ vtime -d
  2020-12-16 17:27:41.872

  $ vtime -t
  1608110863.764814
"""
    print(msg)
    exit(0)


def _datetime(ts, utc):
    assert isinstance(utc, bool)
    dt = datetime.datetime.fromtimestamp(ts)
    if utc:
        utc_ts = time.gmtime(time.mktime(dt.timetuple()))
        utc_ts = time.mktime(utc_ts)
        dt = datetime.datetime.fromtimestamp(utc_ts)
    print(dt.strftime("%Y-%m-%d %H:%M:%S.%f")[0:23])
    exit(0)


def _number_to_string(n):
    assert isinstance(n, int) or isinstance(n, float)
    if isinstance(n, int):
        return str(n)
    else:
        n_int = int(n)
        return str(n_int) if float(n_int) == float(n) else str(n)


def _datetime_to_ts(dt, utc):
    assert isinstance(utc, bool)
    assert isinstance(dt, datetime.datetime)
    if utc:
        utc_ts = time.gmtime(time.mktime(dt.timetuple()))
        return time.mktime(utc_ts)
    else:
        return time.mktime(dt.timetuple())


def _parse_datetime(args):
    # year, month, day, hour, minute, second, microsecond
    field = [0, 0, 0, 0, 0, 0, 0]
    field_max_len = [4, 2, 2, 2, 2, 2, 999999999]
    payload = " ".join(args)
    pos = None
    c = 0
    for i in range(len(payload)):
        if payload[i].isdigit() and pos is None:
            pos = i
        if (not payload[i].isdigit()) and (pos is not None):
            field[c] = int(payload[pos:i])
            c += 1
            pos = None
            continue
        if (pos is not None) and (i - pos > field_max_len[c]):
            field[c] = int(payload[pos:pos + field_max_len[c]])
            c += 1
            pos = None
            continue
    if pos is not None:
        field[c] = int(payload[pos:])
        c += 1
    if c == 0:
        raise Exception("invalid input: %s" % (payload))
    return datetime.datetime(field[0], field[1], field[2], field[3], field[4], field[5], field[6])


def _timestamp(dt, utc):
    if dt.microsecond == 0:
        print(_number_to_string(_datetime_to_ts(dt, utc)))
    else:
        print("%s.%s" % (_number_to_string(_datetime_to_ts(dt, utc)), str(dt.microsecond)))
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "dtuh", ["datetime", "timestamp", "utc", "help"])
        utc = False
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                _help()
            if opt[0] in ("-u", "--utc"):
                utc = True
        for opt in opts:
            if opt[0] in ("-d", "--datetime"):
                ts = time.time()
                if len(args) > 0:
                    ts = float(args[0])
                _datetime(ts, utc)
            elif opt[0] in ("-t", "--timestamp"):
                dt = datetime.datetime.now()
                if len(args) > 0:
                    dt = _parse_datetime(args)
                _timestamp(dt, utc)
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
