#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
import ipaddress

sys.path.append(".")
import util


def _help():
    msg = """usage: vip [option] [ipaddress]

  Validate IP address.

option:
  -v/--validate [mode]                  validate ipaddress, by default for IPv4 address
  --min [mode]                          print minimum ipaddress
  --max [mode]                          print maximum ipaddress
  --loopback [mode]                     print loopback ipaddress

  -h/--help                             show help message

mode:
  v4                                    ipv4
  v6                                    ipv6

example:
  $ vip 127.0.0.1
  127.0.0.1 (2130706433)

  $ vip 2133706831
  127.45.200.79 (2133706831)

  $ vip -v v6 2133706831
  127.45.200.79 (2133706831)

  $ vip --max v6
  ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff (340282366920938463463374607431768211455)

  $ vip.py 289.a.i.1
  error: invalid IPv4:289.a.i.1
"""
    print(msg)
    exit(0)


def _identify_input(ip):
    return ip if (ip.find(".") >= 0 or ip.find(":") >= 0) else int(ip)


def _validate_ipv4(ipv4):
    try:
        ipaddr = ipaddress.IPv4Address(ipv4)
        print("%s (%d)" % (str(ipaddr), int(ipaddr)))
    except Exception:
        print("error: invalid IPv4:%s" % (ipv4))
    exit(0)


def _validate_ipv6(ipv6):
    try:
        ipaddr = ipaddress.IPv6Address(ipv6)
        print("%s (%d)" % (str(ipaddr), int(ipaddr)))
    except Exception:
        print("error: invalid IPv6:%s" % (ipv6))
    exit(0)


def _min_ipv4():
    min_ipv4 = ipaddress.IPv4Address("0.0.0.0")
    print("[vcmd] minimum ipv4: '%s' (%d)" % (str(min_ipv4), int(min_ipv4)))
    exit(0)


def _max_ipv4():
    max_ipv4 = ipaddress.IPv4Address("255.255.255.255")
    print("[vcmd] maximum ipv4: '%s' (%d)" % (str(max_ipv4), int(max_ipv4)))
    exit(0)


def _loopback_ipv4():
    lo_ipv4 = ipaddress.IPv4Address("127.0.0.1")
    print("[vcmd] loopback ipv4: '%s' (%d)" % (str(lo_ipv4), int(lo_ipv4)))
    exit(0)


def _min_ipv6():
    min_ipv6 = ipaddress.IPv6Address("::0")
    print("[vcmd] minimum ipv4: '%s' or '%s' (%d)" % (str(min_ipv6), "::0", int(min_ipv6)))
    exit(0)


def _max_ipv6():
    max_ipv6 = ipaddress.IPv6Address("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
    print("[vcmd] maximum ipv6: '%s' (%d)" % (str(max_ipv6), int(max_ipv6)))
    exit(0)


def _loopback_ipv6():
    lo_ipv6 = ipaddress.IPv6Address("::1")
    print("[vcmd] loopback ipv4: '%s' (%d)" % (str(lo_ipv6), int(lo_ipv6)))
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "min=",
                "max=",
                "loopback=",
                "help",
            ],
        )
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                _help()
        if len(opts) == 0:
            _validate_ipv4(_identify_input(args[0]))
        for opt in opts:
            if opt[0] in ("-v", "--validate"):
                if opt[1] == "v4":
                    _validate_ipv4(_identify_input(args[0]))
                elif opt[1] == "v6":
                    _validate_ipv6(_identify_input(args[0]))
            elif opt[0] == "--min":
                if opt[1] == "v4":
                    _min_ipv4()
                elif opt[1] == "v6":
                    _min_ipv6()
            elif opt[0] == "--min":
                if opt[1] == "v4":
                    _max_ipv4()
                elif opt[1] == "v6":
                    _max_ipv6()
            elif opt[0] == "--loopback":
                if opt[1] == "v4":
                    _loopback_ipv4()
                elif opt[1] == "v6":
                    _loopback_ipv6()
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
